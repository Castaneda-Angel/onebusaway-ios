//
//  ModelHelpers.swift
//  OBAKit
//
//  Created by Aaron Brethorst on 10/21/18.
//  Copyright Â© 2018 OneBusAway. All rights reserved.
//

import Foundation

class ModelHelpers: NSObject {
    /// Converts empty string fields into `nil`s.
    ///
    /// There are some parts of the OneBusAway REST API that return empty strings
    /// where null would actually be a more appropriate value to provide. Alas,
    /// this will probably never change because of backwards compatibility concerns
    /// but that doesn't mean we can't address it here.
    ///
    /// - Parameter str: The string to inspect.
    /// - Returns: Nil if the string's character count is zero, and the string otherwise.
    static func nilifyBlankValue(_ str: String?) -> String? {
        guard let str = str else {
            return nil
        }

        return str.count > 0 ? str : nil
    }

    /// Converts a date that represents the 1970 epoch date to nil
    ///
    /// - Parameter date: A date
    /// - Returns: Nil if the date was represented by the value `0` and the date otherwise.
    static func nilifyEpochDate(_ date: Date) -> Date? {
        if date == Date(timeIntervalSince1970: 0) {
            return nil
        }
        else {
            return date
        }
    }
}

public extension Encodable {
    /// Generates a dictionary representation of `self` using a `DictionaryEncoder`.
    ///
    /// - Note: Use the `toDictionary(encoder:)` form for better performance when encoding several objects.
    ///
    /// - Returns: A dictionary representation of `self`.
    /// - Throws: Rethrows errors generated by the `DictionaryEncoder`.
    func toDictionary() throws -> [String: Any] {
        return try toDictionary(encoder: DictionaryEncoder())
    }

    /// Generates a dictionary representation of `self` using a `DictionaryEncoder`.
    ///
    /// - Parameter encoder: An instance of `DictionaryEncoder`.
    /// - Returns: A dictionary representation of `self`.
    /// - Throws: Rethrows errors generated by `encoder`.
    func toDictionary(encoder: DictionaryEncoder) throws -> [String: Any] {
        let props = try encoder.encode(self) as [String: Any]
        return props
    }
}

public extension Sequence where Element: Encodable {

    /// Generates a dictionary representation of `self` using a `DictionaryEncoder`.
    ///
    /// - Returns: A sequence of dictionary representations of the contained elements.
    /// - Throws: Rethrows errors generated by the `DictionaryEncoder`.
    func toDictionaries() throws -> [[String: Any]] {
        let encoder = DictionaryEncoder()
        return try map { try $0.toDictionary(encoder: encoder) }
    }
}
